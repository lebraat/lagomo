name: Test Notifications

on:
  workflow_run:
    workflows: ["Test Suite"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  checks: read
  id-token: write

jobs:
  notify:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'success'
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::266654255232:role/github-actions-ses-role
          aws-region: us-east-1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install @aws-sdk/client-ses
          sudo apt-get update && sudo apt-get install -y jq

      - name: Get workflow details
        uses: actions/github-script@v6
        id: workflow-details
        with:
          script: |
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            let failedJobs = jobs.data.jobs.filter(job => job.conclusion === 'failure');
            let failureDetails = failedJobs.map(job => {
              return `${job.name}: ${job.steps.filter(step => step.conclusion === 'failure').map(step => step.name).join(', ')}`;
            }).join('\n');
            
            return {
              branch: run.data.head_branch,
              commit_message: run.data.head_commit.message,
              author: run.data.head_commit.author.name,
              failed_jobs: failureDetails,
              run_url: context.payload.workflow_run.html_url
            };

      - name: Send notification
        if: always()
        env:
          DETAILS: ${{ steps.workflow-details.outputs.result }}
        run: |
          DETAILS_JSON='${{ steps.workflow-details.outputs.result }}'
          BRANCH=$(echo "$DETAILS_JSON" | jq -r '.branch')
          COMMIT=$(echo "$DETAILS_JSON" | jq -r '.commit_message')
          AUTHOR=$(echo "$DETAILS_JSON" | jq -r '.author')
          FAILED_JOBS=$(echo "$DETAILS_JSON" | jq -r '.failed_jobs')
          RUN_URL=$(echo "$DETAILS_JSON" | jq -r '.run_url')

          node -e '
            const { SESClient, SendEmailCommand } = require("@aws-sdk/client-ses");
            
            async function sendEmail() {
              const client = new SESClient({ region: "us-east-1" });
              
              const params = {
                Source: "gucci@lagomo.xyz",
                Destination: {
                  ToAddresses: ["gucci@lagomo.xyz"],
                },
                Message: {
                  Subject: {
                    Data: `[DEV] Tests Failed - Lagomo (${process.env.BRANCH})`,
                  },
                  Body: {
                    Text: {
                      Data: `⚠️ Test Failure Alert\n\nA test failure has occurred.\n\n## Failure Details\n- Branch: ${process.env.BRANCH}\n- Commit Message: ${process.env.COMMIT}\n- Author: ${process.env.AUTHOR}\n- Failed Jobs:\n${process.env.FAILED_JOBS}\n\n## Action Required\nPlease investigate and fix the failing tests.\n\nView Workflow Run: ${process.env.RUN_URL}`
                    },
                  },
                },
              };
            
              try {
                const command = new SendEmailCommand(params);
                const response = await client.send(command);
                console.log("Email sent successfully:", response.MessageId);
              } catch (error) {
                console.error("Error sending email:", error);
                process.exit(1);
              }
            }
            
            sendEmail();
          '
